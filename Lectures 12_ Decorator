{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User with role 'user' is not authorized to access this function.\n",
      "Showing customer receipt\n"
     ]
    }
   ],
   "source": [
    "# Zadanie 1 i 2\n",
    "def is_admin(func):\n",
    "        def wrapper(*args, **kwargs):\n",
    "            user_type = kwargs.get('user_type')\n",
    "            if user_type == 'admin':\n",
    "                return func(*args, **kwargs)\n",
    "            else:\n",
    "                raise PermissionError(f\"User with role '{user_type}' is not authorized to access this function.\")\n",
    "        return wrapper\n",
    "\n",
    "@is_admin \n",
    "def show_customer_receipt(user_type: str):\n",
    "    print(\"Showing customer receipt\")\n",
    "    \n",
    "try:\n",
    "    show_customer_receipt(user_type='user')\n",
    "except PermissionError as e:\n",
    "    print(e)\n",
    "\n",
    "show_customer_receipt(user_type='admin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1 error during execution of your function: KeyError 'key'\n",
      "bar\n"
     ]
    }
   ],
   "source": [
    "# Zadanie 2\n",
    "\n",
    "def catch_errors(func):\n",
    "    def wrapper(*args, **kwargs):\n",
    "        try:\n",
    "            return func(*args, **kwargs)\n",
    "        except Exception as e:\n",
    "            print(f\"Found 1 error during execution of your function: {type(e).__name__} {e}\")\n",
    "    return wrapper\n",
    "\n",
    "@catch_errors\n",
    "def some_function_with_risky_operation(data):\n",
    "    print(data['key'])\n",
    "\n",
    "some_function_with_risky_operation({'foo': 'bar'})\n",
    "some_function_with_risky_operation({'key': 'bar'})    \n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
